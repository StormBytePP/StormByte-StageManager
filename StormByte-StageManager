#! /bin/bash

# This script can run standalone if its config and functions are in its folder
workdir="${0%/*}"
if [ -f "${workdir}/functions.sh" ]; then
	source "${workdir}/functions.sh"
elif [ -f "/lib/StormByte/functions.sh" ]; then
	source "/lib/StormByte/functions.sh"
else
	echo "Can't find functions.sh file in neither current directory neither /lib/StormByte"
	exit 1
fi

loadConfig

version="3.0.0"
current_folder=`pwd`
file_list=(`find "${TARBALL_FOLDER}" -maxdepth 1 -type f \( -iname "*.tar.gz" -o -iname "*.tgz" -o -iname "*.tar.bz2" -o -iname "*.tbz2" -o -iname "*.tar.xz" -o -iname "*.txz" -o -iname "*.tar.zstd" -o -iname "*.tzd" \) ! -name 'ccache.txz'`)
tarball_filename_fullpath=""
tarball_filename=""
tarball_extension=""
tarball=""
tarball_output=""
compress=""
extract=""
tar_compress="tar -cpf - . --numeric-owner --xattrs-include='*.*' --ignore-failed-read"
tar_decompress="tar -xpf - --numeric-owner --xattrs-include='*.*'"
if [ -f /usr/bin/pigz ]; then
	gzip="pigz -${GZIP_COMPRESSION_LEVEL} -c"
else
	gzip="gzip2 -${GZIP_COMPRESSION_LEVEL} -c"
fi
if [ -f /usr/bin/pbzip2 ]; then
	bzip2="pbzip2 -${BZIP_COMPRESSION_LEVEL} -c"
else
	bzip2="bzip2 -${BZIP_COMPRESSION_LEVEL} -c"
fi
if [ -f /usr/bin/pxz ]; then
	xz="pxz -${XZ_COMPRESSION_LEVEL}T0 -c"
else
	xz="xz -${XZ_COMPRESSION_LEVEL}T0 -c"
fi
zstd="pzstd -${ZSTD_COMPRESSION_LEVEL}q -c"
command="${parameters[0]}"
tmp_folder=""
lockfile=""
output_folder=""
available_commands=(list use rebase convert export delete rename download help notes)
available_compression_formats=( gzip bzip2 xz zstd )
available_compression_extensions=( tar.gz tgz tar.bz2 tbz2 tar.xz txz tar.zstd tzd )
zram_device=""
ccache_file="${TARBALL_FOLDER}/ccache.txz"
gentoo_base_url="https://repo.ifca.es/gentoo-distfiles/releases"

function header() {
	echo "StormByte Gentoo Stage Manager Version ${version}"
	echo "Author: David C. Manuelda a.k.a StormByte <StormByte@gmail.com>"
	echo ""
}

function usage() {
	echo "This script will handle a gentoo chroot from a compressed tarball, it will mount all the needed points, chroot to it, clean, and make changes to compressed file again"
	echo "Configuration is located in /etc/conf.d/StormByte-StageManager.conf"
	echo "Usage is $self <command> <arguments>"
	echo "Available commands are: ${available_commands[*]}"
	echo "For more detailed help, use $self help <command> or $self help compression for more information about compression"
	echo "See configuration file $config_file for more tweaking options"
}

function helpList() {
	echo "Usage: $self list"
	echo "This command will list the files in the folder specified which is ${TARBALL_FOLDER}, showing index number, size and filename."
	echo "Use that index name to refer to the file in other commands"
}

function helpUse() {
	echo "Usage: $self use <index>"
	echo "This command will use file specified as index (see list command) for configuring and entering a chroot"
}

function helpRebase() {
	echo "Usage: $self rebase <index> <new_file_name>"
	echo "This command is similar to use command, but before entering chroot, it copies file specified from index (see list command) to destination folder set in $config under new_file_name."
	echo "Compression method is determined by the extension, see $self help compression for more details"
}

function helpConvert() {
	echo "Usage: $self convert <index> <compression_format>"
	echo "This command will copy file specified by index and recompress to selected compression_format, an error will be raised if target filename determined by compression already exists"
	echo "For more info about compression use $self help compression"
}

function helpExport() {
	echo "Usage: $self export <index> <destination_folder> <compression_format>"
	echo "This command is similar to convert, but it allows to specify a destination folder for the new file. This folder has to exist or an error will be raised"
}

function helpDelete() {
	echo "Usage: $self delete <index>"
	echo "This command will delete a file specified by its index (see list command)"
}

function helpRename() {
	echo "Usage: $self rename <index> <new_file_name>"
	echo "This command allows renaming a file specified by index (see list command) to a new_file_name under the same folder."
}

function helpCompression() {
	echo "This utility uses compression for keeping storage of its files, some times, depending on the command, compression is determined by the file extension or by the name of the compressor algorithm"
	echo "Available extensions are: ${available_compression_extensions[*]}"
	echo "Available compression formats are: ${available_compression_formats[*]}"
}

function helpDownload() {
	echo "Usage: $self download <arch> <profile>"
	echo "This command will download a stage3 for selected arch and profile. If profile is not specified, a default one will be chosen"
	echo "Available arches are i486, i686, amd64 and x32"
	echo "Available profiles depends on selected arch:"
	echo ""
	echo "i486:"
	echo "  * default"
	echo ""
	echo "i686:"
	echo "  * default"
	echo "  * hardened"
	echo "  * systemd"
	echo "  * uclibc-hardened"
	echo "  * uclibc-vanilla"
	echo ""
	echo "amd64:"
	echo "  * default (multilib)"
	echo "  * hardened"
	echo "  * nomultilib"
	echo "  * systemd"
	echo "  * hardened+nomultilib"
	echo "  * hardened-selinux"
	echo "  * hardened-selinux+nomultilib"
	echo "  * uclibc-hardened"
	echo "  * uclibc-vanilla"
	echo ""
	echo "x32:"
	echo "  * default"
}

function helpNotes() {
	echo "Usage: $self notes <index> <subcommand>"
	echo "This command will handle notes for a stage tarball index via specified subcommand:"
	echo "  * edit -> Edits notes for specified stage via config's specified editor"
	echo "  * delete -> Cleans stage notes"
}

function checkVars() {
	local errors=0
	if [ -z "${STORAGE_SYSTEM}" ] || [ "${STORAGE_SYSTEM}" != "zram" ] && [ "${STORAGE_SYSTEM}" != "tmpfs" ] && [ "${STORAGE_SYSTEM}" != "folder" ]; then
		echo "STORAGE_SYSTEM variable is not set, is empty or contains an invalid value!"
		errors=1
	fi
	# We only check for STORAGE_SIZE if zram or tmpfs is set to be used
	if [ "${STORAGE_SYSTEM}" = "zram" ] || [ "${STORAGE_SYSTEM}" = "tmpfs" ]; then
		local re="^[0-9]+[MG]$" # For checking storage size
		if ! [[ "${STORAGE_SIZE}" =~ $re ]]; then
			echo "STORAGE_SIZE is either empty or invalid, check if its value is correct!"
			errors=1
		fi
	fi
	if [ "${STORAGE_SYSTEM}" = "zram" ]; then
		if ! [ -z "${STORAGE_SYSTEM_ZRAM_COMPRESSION_LEVEL}" ]; then
			local re="^[0-9]+[MG]$" # For checking storage size
			if ! [[ "${STORAGE_SIZE}" =~ $re ]]; then
				echo "STORAGE_SIZE is either empty or invalid, check if its value is correct!"
				errors=1
			fi
			if [ "${STORAGE_SYSTEM_ZRAM_COMPRESSION_LEVEL}" -lt 0 ] || [ "${STORAGE_SYSTEM_ZRAM_COMPRESSION_LEVEL}" -gt 15 ]; then
				echo "STORAGE_SYSTEM_ZRAM_COMPRESSION_LEVEL has a value which is less than 0 or greater than 15"
				errors=1
			fi
		fi
	fi

	if [ -z "${TARBALL_FOLDER}" ]; then
		echo "TARBALL_FOLDER variable is not set or empty!"
		errors=1
	fi
	if [ ! -f "${TARBALL_NOTE_EDITOR}" ]; then
		echo "Editor executable is not found"
		errors=1
	fi
	if [ "${DETACH_NOTE_EDITOR}" != "NO" ] && [ "${DETACH_NOTE_EDITOR}" != "YES" ]; then
		echo "DETACH_NOTE_EDITOR variable only accepts values YES and NO"
		errors=1
	fi
	if ! [[ "${GZIP_COMPRESSION_LEVEL}" =~ ^[1-9]$ ]]; then
		echo "Gzip compression level is not in a range between 1 and 9!"
		errors=1
	fi
	if ! [[ "${BZIP_COMPRESSION_LEVEL}" =~ ^[1-9]$ ]]; then
		echo "Bzip compression level is not in a range between 1 and 9!"
		errors=1
	fi
	if ! [[ "${XZ_COMPRESSION_LEVEL}" =~ ^[1-9]$ ]]; then
		echo "Xz compression level is not in a range between 1 and 9!"
		errors=1
	fi
	if ! [[ "${ZSTD_COMPRESSION_LEVEL}" =~ ^[1-9]+$ ]] || ! [ "${ZSTD_COMPRESSION_LEVEL}" -ge 1 -a "${ZSTD_COMPRESSION_LEVEL}" -le 19 ]; then
		echo "Zstd compression level is not in a range between 1 and 19!"
		errors=1
	fi
	if [ "${USE_CCACHE_BIND}" != "NO" ] && [ "${USE_CCACHE_BIND}" != "YES" ]; then
		echo "Ccache bind variable is not set to either YES or NO"
		errors=1
	fi
	if [ "${USE_CCACHE}" != "NO" ] && [ "${USE_CCACHE}" != "YES" ]; then
		echo "Use ccache variable is not set to either YES or NO"
		errors=1
	fi
	if [ "${USE_CCACHE}" != "NO" ]; then
		if [ -z "${CCACHE_DIR}" ]; then
			echo "Ccache folder variable is empty or undefined!"
			errors=1
		elif [ ! -d "${CCACHE_DIR}" ]; then
			echo "Ccache folder ${CCACHE_DIR} does NOT exist"
			errors=1
		fi
	fi
	if [ "${USE_PKG_BIND}" != "NO" ] && [ "${USE_PKG_BIND}" != "YES" ]; then
		echo "PKG dir bind variable is not set to either YES or NO"
		errors=1
	fi
	if [ -z "${PKG_DIR}" ]; then
		echo "PKG folder variable is empty or undefined!"
		errors=1
	elif [ ! -d "${PKG_DIR}" ]; then
		echo "PKG folder ${PKG_DIR} does NOT exist"
		errors=1
	fi
	if [ "${USE_DISTFILES_BIND}" != "NO" ] && [ "${USE_DISTFILES_BIND}" != "YES" ]; then
		echo "Distfiles bind variable is not set to either YES or NO"
		errors=1
	fi
	if [ -z "${DISTFILES_DIR}" ]; then
		echo "Distfiles folder variable is empty or undefined!"
		errors=1
	elif [ ! -d "${DISTFILES_DIR}" ]; then
		echo "Distfiles folder ${DISTFILES_DIR} does NOT exist"
		errors=1
	fi
	if [ -z "${BTRFS_CHECKSUM}" ]; then
		BTRFS_CHECKSUM="crc32c"
		elif [ "${BTRFS_CHECKSUM}" != "crc32c" ] && [ "${BTRFS_CHECKSUM}" != "xxhash" ] && [ "${BTRFS_CHECKSUM}" != "sha256" ] && [ "${BTRFS_CHECKSUM}" != "blake2" ]; then
			echo "BTRFS_CHECKSUM value ${BTRFS_CHECKSUM} is invalid, valid values are: crc32c, xxhash, sha256 and blake2"
			errors=1
	fi
	if [ "${errors}" -eq 1 ]; then
		exit 1
	fi
}

function setOutputFolder() {
	if [ "$#" -eq 0 ]; then
		output_folder="${TARBALL_FOLDER}"
	else
		output_folder="$1"
		if [ ! -d "${output_folder}" ]; then
			echo "Output folder ${output_folder} does not exist!"
			exit 1
		fi
	fi
}

function setDecompression() {
	case "$1" in
		tar.gz|tgz|gzip)
			extract="${gzip} -d -"
			;;

		tar.bz2|tbz2|bzip2)
			extract="${bzip2} -d -"
			;;

		tar.xz|txz|xz)
			extract="${xz} -d -"
			;;

		tar.zstd|tzd|zstd)
			extract="${zstd} -d -"
			;;

		*)
			echo "Error: compression method $1 unknown"
			exit 1
			;;
	esac
}

function setCompression() {
	local tarball_output_extension=""
	case "$1" in
		tar.gz|tgz|gzip)
			compress=${gzip}
			tarball_output_extension="tgz"
			;;

		tar.bz2|tbz2|bzip2)
			compress=${bzip2}
			tarball_output_extension="tbz2"
			;;

		tar.xz|txz|xz)
			compress=${xz}
			tarball_output_extension="txz"
			;;

		tar.zstd|tzd|zstd)
			compress=${zstd}
			tarball_output_extension="tzd"
			;;

		*)
			echo "Error: compression method $1 unknown"
			exit 1
			;;
	esac
	tarball_output="${tarball_filename}.${tarball_output_extension}"
}

function mountSystem() {
	handleCommand "mount -t proc /proc ${tmp_folder}/proc && mount --rbind /dev ${tmp_folder}/dev && mount --make-rslave ${tmp_folder}/dev && mount --rbind /sys ${tmp_folder}/sys && mount --make-rslave ${tmp_folder}/sys && mount -t tmpfs tmpfs ${tmp_folder}/run" "Mounting system structures"
}

function unmountSystem() {
	cd "${current_folder}"
	handleCommand "umount -Rl ${tmp_folder}/proc && umount -Rl ${tmp_folder}/dev && umount -Rl ${tmp_folder}/sys && umount -l ${tmp_folder}/run" "Unmounting system structures"
}

function cleanStage() {
	handleCommand "rm -Rf ${tmp_folder}/tmp/* ${tmp_folder}/var/tmp/portage" "Cleaning portage temporary files"
	handleCommand "rm -Rf ${tmp_folder}{${PKG_DIR},${DISTFILES_DIR}}/*" "Cleaning files"
	if [ "${USE_CCACHE}" != "NO" ]; then
		handleCommand "rm -Rf ${tmp_folder}${CCACHE_DIR}/*" "Cleaning ccache files"
	fi
	# It might happen that there are no log or no /var/tmp files in which case cleaning will fail so we do it safely
	handleCommand "find ${tmp_folder}/var/log -type f -exec rm -f {} \; && find ${tmp_folder}/var/tmp -type f -exec rm -f {} \;" "Cleaning logs"
	handleCommand "rm -f ${tmp_folder}/root/.bash_history" "Cleaning history"
}

function setAndCheckFile() {
	# If this received a parameter then will ignore selected index and will use the file provided in parameter
	if [ "$#" -eq 0 ]; then
		local re='^[0-9]+$'
		if [[ ${parameters[1]} =~ $re ]] ; then
			tarball_filename_fullpath="${file_list[${parameters[1]}]}"
		else
			echo "Parameter should be an integer for the index"
			exit 1
		fi
	else
		tarball_filename_fullpath="$1"
	fi

	# If we provided filename by parameter, we skip existance check
	if [ "$#" -eq 0 ] && [ ! -f "${tarball_filename_fullpath}" ]; then
		echo "File $tarball_filename_fullpath does not exist"
		exit 1
	fi

	tarball=`basename "${tarball_filename_fullpath}"`
	tarball_filename="${tarball%.*}"
	tarball_extension="${tarball##*.}"
	setCompression ${tarball_extension}
	setDecompression ${tarball_extension}
	lockfile="/tmp/.${tarball}.lock"
	if [ -z "${tarball_extension}" ]; then
		echo "Tarball extension is empty, did you specified correctly the file name?"
		exit 1
	fi
}

function checkFileCopy() {
	# Received 2 parameters: origin destination
	origin="${TARBALL_FOLDER}/`basename $1`"
	destination="${TARBALL_FOLDER}/`basename $2`"
	if [ ! -f "$origin" ]; then
		echo "Origin file `basename $origin` does not exist"
		exit 1
	elif [ -f "$destination" ]; then
		echo "Destination file `basename $destination` already exist"
		exit 1
	fi
}

function createTMPFolder() {
	handleCommand "tmp_folder=`mktemp -d -t \"tmp.${tarball_filename}.XXXXXXXX\"`" "Creating temporary folder"
}

function deleteTMPFolder() {
	handleCommand "rm -Rf ${tmp_folder}" "Deleting temporary folder"
}

function mountTEMP() {
	case "${STORAGE_SYSTEM}" in
		folder)
			mountFOLDER
			;;
		tmpfs)
			mountTMPFS
			;;
		zram)
			mountZRAM
			;;
	esac
}

function unmountTEMP() {
	case "${STORAGE_SYSTEM}" in
		folder)
			unmountFOLDER
			;;
		tmpfs)
			unmountTMPFS
			;;
		zram)
			unmountZRAM
			;;
	esac
}

function readonlyTEMP() {
	if [ "${STORAGE_SYSTEM}" != "folder" ]; then
		handleCommand "mount -o remount,ro ${tmp_folder}" "Making stage filesystem readonly"
	fi
}

function mountFOLDER() {
	mkdir -p "${tmp_folder}"
}

function mountZRAM() {
	mkdir -p "${tmp_folder}"
	zram_device_full=`zramctl -f`
	zram_device=`basename "${zram_device_full}"`
	zram_zstd_compression=""
	if [ -z "${zram_device}" ]; then
		echo "ERROR: There are no ZRAM devices available";
		exit 1;
	fi
	if [ -z "${STORAGE_SYSTEM_ZRAM_COMPRESSION_LEVEL}" ]; then
		zram_zstd_compression="zstd"
	else
		zram_zstd_compression="zstd:${STORAGE_SYSTEM_ZRAM_COMPRESSION_LEVEL}"
	fi
	handleCommand "echo 1 > /sys/block/${zram_device}/reset" "Resetting ZRAM"
	handleCommand "echo '${STORAGE_SIZE}' > /sys/block/${zram_device}/disksize" "Setting ZRAM size to ${STORAGE_SIZE}"
	handleCommand "mkfs.btrfs --checksum ${BTRFS_CHECKSUM} ${zram_device_full}" "Initializing ${zram_device} with btrfs"
	handleCommand "mount ${zram_device_full} '${tmp_folder}' -o noatime,compress=${zram_zstd_compression}" "Mounting ${zram_device} storage with compression ${zram_zstd_compression}"
}

function mountTMPFS() {
	mkdir -p "${tmp_folder}"
	handleCommand "mount -t tmpfs -o size=${STORAGE_SIZE} tmpfs ${tmp_folder} -o nr_inodes=0" "Mounting tmpfs storage"
}

function mountPKG() {
	mkdir -p "${tmp_folder}${PKG_DIR}"
	touch "${tmp_folder}${PKG_DIR}/.keep"

	if [ "${USE_PKG_BIND}" == "YES" ]; then
		handleCommand "mount --bind ${PKG_DIR} ${tmp_folder}${PKG_DIR}" "Mounting PKG storage"
	fi
}

function mountDistfiles() {
	mkdir -p "${tmp_folder}${DISTFILES_DIR}"
	touch "${tmp_folder}${DISTFILES_DIR}/.keep"

	if [ "${USE_DISTFILES_BIND}" == "YES" ]; then
		handleCommand "mount --bind ${DISTFILES_DIR} ${tmp_folder}${DISTFILES_DIR}" "Mounting distfiles storage"
	fi
}

function mountCCache() {
	if [ "${USE_CCACHE}" == "YES" ]; then
		mkdir -p "${tmp_folder}${CCACHE_DIR}"
		touch "${tmp_folder}${CCACHE_DIR}/.keep"

		if [ "${USE_CCACHE_BIND}" == "YES" ]; then
			handleCommand "mount --bind ${CCACHE_DIR} ${tmp_folder}${CCACHE_DIR}" "Mounting CCache storage"
		fi
	fi
}

function unmountFOLDER() {
	cd "${current_folder}"
	# This is a NO OP function as it will be just deleted later
}

function unmountZRAM() {
	cd "${current_folder}"
	handleCommand "umount -Rl ${tmp_folder}" "Unmounting ${zram_device} storage"
	handleCommand "rm -Rf ${tmp_folder}" "Deleting rest of unused data"
	handleCommand "sync" "Flushing data"
	handleCommand "echo 1 > /sys/block/${zram_device}/reset" "Deactivating ${zram_device}"
}

function unmountTMPFS() {
	cd "${current_folder}"
	handleCommand "umount -R ${tmp_folder}" "Unmounting tmpfs storage"
}

function unmountPKG() {
	cd "${current_folder}"
	if [ "${USE_PKG_BIND}" == "YES" ]; then
		handleCommand "umount ${tmp_folder}${PKG_DIR}" "Unmounting PKG storage"
	fi
}

function unmountDistfiles() {
	cd "${current_folder}"
	if [ "${USE_DISTFILES_BIND}" == "YES" ]; then
		handleCommand "umount ${tmp_folder}${DISTFILES_DIR}" "Unmounting distfiles storage"
	fi
}

function unmountCCache() {
	if [ "${USE_CCACHE}" == "YES" ]; then
		cd "${current_folder}"
		if [ "${USE_CCACHE_BIND}" == "YES" ]; then
			handleCommand "umount ${tmp_folder}${CCACHE_DIR}" "Unmounting CCache storage"
		fi
	fi
}

function extractArchive() {
	local text=""
	# If we provided a parameter then it means we come here by a rebase not a normal use, so we adapt message reflecting this fact
	if [ "$#" -eq 0 ]; then
		text="Extracting system files from ${tarball}"
	else
		text="Rebasing `basename $1` using system files from ${tarball}"
	fi
	cd "${tmp_folder}"
	handleCommandWithOutput "pv ${tarball_filename_fullpath} | ${extract} | ${tar_decompress}" "${text}"
}

function saveChanges() {
	local reply=""
	while [[ ! $reply =~ ^[YyNn]$ ]]; do
		read -p "Do you want to save the changes? [Y/N]: " -r
		reply=$REPLY
	done
	if [[ $reply =~ ^[Yy]$ ]]; then
		if [ "${USE_CCACHE_FILE}" == "YES" ]; then
			undoCcache
		fi
		# If we came from a rebase request, then we need to temporary set file and revert back for cleaning purposes
		if [ "$#" -ne 0 ]; then
			setAndCheckFile "${TARBALL_FOLDER}/${parameters[2]}"
		fi
		compressArchive
		if [ "$#" -ne 0 ]; then
			setAndCheckFile
		fi
	fi
}

function compressArchive() {
	cd "${tmp_folder}"
	handleCommandWithOutput "${tar_compress} | pv -s $(du -sbl ${tmp_folder} | awk '{print $1}') | ${compress} > ${output_folder}/.${tarball_output}.compress" "Compressing system files to ${tarball_output}"
	mv "${output_folder}/.${tarball_output}.compress" "${output_folder}/${tarball_output}"
}

function doCcache() {
	if [ "${USE_CCACHE_FILE}" == "YES" ]; then
		mkdir -p "${tmp_folder}/${CCACHE_OUT_FOLDER}"
		if [ -f "${ccache_file}" ]; then
			local prev_folder=`pwd`
			cd "${tmp_folder}/${CCACHE_OUT_FOLDER}"
			handleCommandWithOutput "pv ${ccache_file} | ${xz} -d - | ${tar_decompress}" "Extracting CCache data..."
			cd "${prev_folder}"
		fi
	fi
}

function undoCcache() {
	local prev_folder=`pwd`
	cd "${tmp_folder}/${CCACHE_OUT_FOLDER}"
	handleCommandWithOutput "${tar_compress} | pv -s $(du -sbl . | awk '{print $1}') | ${xz} > ${ccache_file}" "Compressing CCache data"
	handleCommand "find ${tmp_folder}/${CCACHE_OUT_FOLDER} -type d -exec rm -f {} \;" "Cleaning CCache folders"
	cd "${prev_folder}"
}

function doChroot() {
	echo "Entering chroot, don't forget to run env-update && . /etc/profile"
	chroot "${tmp_folder}" "/bin/bash"
}

function doList() {
	if [ -z "${file_list}" ]; then
		echo "File list is empty, check ${TARBALL_FOLDER} contents!"
		exit 1
	fi
	echo -e "Index\tSize\t\tFile Name"
	for i in "${!file_list[@]}"; do
		tarball_filename=`basename ${file_list[$i]}`
		local size=`ls -s --block-size=1048576 "${file_list[$i]}" | cut -d' ' -f1`
		echo -en "$i\t${size} MiB"
		if [ "${#size}" -gt 3 ]; then
			echo -en "\t"
		else
			echo -en "\t\t"
		fi
		echo -n "${tarball_filename}"
		if [ -f "${TARBALL_FOLDER}/${tarball_filename}.notes" ]; then
			echo -n " (has notes)"
		fi
		if [ -f "/tmp/.${tarball_filename}.lock" ]; then
			echo -n " (in use)"
		fi
		echo "" # To force a new line
	done
}

doLock() {
	if [ -f "${lockfile}" ]; then
		echo "Another instance is running using file ${lockfile}"
		echo "If this is an error manually delete ${lockfile} file"
		exit 1
	fi
	handleCommand "touch ${lockfile}" "Setting lockfile"
}

doUnlock() {
	handleCommand "rm -f ${lockfile}" "Removing lockfile"
}

function doUse() {
	# If no parameter if received, it will autodetect from script arguments, otherwise it will use provided filename as parameter
	setAndCheckFile "$@"
	doLock
	createTMPFolder
	mountTEMP
	extractArchive
	mountPKG
	mountDistfiles
	mountCCache
	doCcache
	mountSystem
	doChroot
	unmountSystem
	unmountCCache
	unmountDistfiles
	unmountPKG
	cleanStage
	readonlyTEMP
	saveChanges
	unmountTEMP
	deleteTMPFolder
	doUnlock
}

function doConvert() {
	setAndCheckFile
	setCompression ${parameters[2]}
	setDecompression ${tarball_extension}
	doLock
	createTMPFolder
	mountTEMP
	extractArchive
	readonlyTEMP
	compressArchive
	unmountTEMP
	deleteTMPFolder
	doUnlock
}

function doExport() {
	setOutputFolder "${parameters[2]}"
	setAndCheckFile
	setCompression ${parameters[3]}
	setDecompression ${tarball_extension}
	tarball_output="${tarball_output%.*}-`date +%Y%m%d`.${tarball_output##*.}"
	if [ -f "${output_folder}/${tarball_output}" ]; then
		local reply=""
		while [[ ! $reply =~ ^[YyNn]$ ]]; do
			read -p "File ${tarball_output} already exists, overwrite? [Y/N]: " -r
			reply=$REPLY
		done
		if [[ $reply =~ ^[Nn]$ ]]; then
			echo "No action was done"
			exit 1
		fi
	fi
	doLock
	createTMPFolder
	mountTEMP
	extractArchive
	readonlyTEMP
	compressArchive
	unmountTEMP
	deleteTMPFolder
	doUnlock
}

function doDelete() {
	setAndCheckFile
	doLock
	handleCommand "rm -f ${tarball_filename_fullpath}" "Deleting file ${tarball}"
	doUnlock
}

function doRename() {
	local new_filename=`basename "${parameters[2]}"`
	setAndCheckFile
	checkFileCopy "${tarball_filename_fullpath}" "${new_filename}"
	doLock
	handleCommand "mv '${tarball_filename_fullpath}' '${TARBALL_FOLDER}/${new_filename}'" "Renaming ${tarball} to ${new_filename}"
	doUnlock
}

function doRebase() {
	# doRebase is a special version of do use, but changing the compression method and output file right before save changes, so when saving, new filename and compression method will be used instead
	setAndCheckFile
	doLock
	createTMPFolder
	mountTEMP
	extractArchive "${TARBALL_FOLDER}/${parameters[2]}"
	mountPKG
	mountDistfiles
	mountCCache
	doCcache
	mountSystem
	doChroot
	unmountSystem
	unmountCCache
	unmountDistfiles
	unmountPKG
	cleanStage
	readonlyTEMP
	saveChanges "${TARBALL_FOLDER}/${parameters[2]}"
	unmountTEMP
	deleteTMPFolder
	doUnlock
}

function checkDownloadParameters() {
	arch="${parameters[1]}"
	profile="${parameters[2]}"
	profile_error=0
	arch_error=0
	if [ -z "${profile}" ]; then
		profile="default"
	fi
	case "${arch}" in
		i486)
			stage_base_url="${gentoo_base_url}/x86/autobuilds"
			case "${profile}" in
				default)
					stage_info_file="latest-stage3-i486-openrc.txt"
					;;
				*)
					profile_error=1
					;;
			esac
			;;
		i686)
			stage_base_url="${gentoo_base_url}/x86/autobuilds"
			case "${profile}" in
				default)
					stage_info_file="latest-stage3-i686-openrc.txt"
					;;
				hardened)
					stage_info_file="latest-stage3-i686-hardened-openrc.txt"
					;;
				systemd)
					stage_info_file="latest-stage3-i686-systemd.txt"
					;;
				*)
					profile_error=1
					;;
			esac
			;;
		amd64)
			stage_base_url="${gentoo_base_url}/amd64/autobuilds"
			case "${profile}" in
				default)
					stage_info_file="latest-stage3-amd64-openrc.txt"
					;;
				hardened)
					stage_info_file="latest-stage3-amd64-hardened-openrc.txt"
					;;
				nomultilib)
					stage_info_file="latest-stage3-amd64-nomultilib-openrc.txt"
					;;
				systemd)
					stage_info_file="latest-stage3-amd64-systemd.txt"
					;;
				hardened+nomultilib)
					stage_info_file="latest-stage3-amd64-hardened-nomultilib-openrc.txt"
					;;
				hardened-selinux)
					stage_info_file="latest-stage3-amd64-hardened-selinux-openrc.txt"
					;;
				hardened-selinux+nomultilib)
					stage_info_file="latest-stage3-amd64-hardened-nomultilib-selinux-openrc.txt"
					;;
				*)
					profile_error=1
					;;
			esac
			;;
		*)
			arch_error=1
			;;
	esac

	if [ "${arch_error}" -eq 1 ]; then
		displayError "Arch '${arch}' is not available for download, consult $self help download"
	fi
	if [ "${profile_error}" -eq 1 ]; then
		displayError "Profile '${profile}' is not available for arch '${arch}', consult $self help download"
	fi
}

function doDownload() {
	arch="${parameters[1]}"
	profile="${parameters[2]}"
	if [ -z "${profile}" ]; then
		profile="default"
	fi

	checkDownloadParameters
	createTMPFolder
	handleCommand "curl -o ${tmp_folder}/${stage_info_file} ${stage_base_url}/${stage_info_file}" "Downloading stage information"
	# stage_file="`sed -r -e 's/(^[^#]*$)/\1/g; /^#.*$/d;' ${tmp_folder}/${stage_info_file} | awk '{print $1}'`"
	# Stage info file has now a PGP signature we need to ignore
	stage_file="`sed '6q;d' < ${tmp_folder}/${stage_info_file} | awk -F' ' '{print $1}'`"
	handleCommand "curl -o ${tmp_folder}/`basename ${stage_file}` ${stage_base_url}/${stage_file}" "Downloading `basename ${stage_file}`"
	handleCommand "mv '${tmp_folder}/`basename ${stage_file}`' '${TARBALL_FOLDER}/`basename ${stage_file}`'" "Moving stage data from temporary folder"
	deleteTMPFolder
	echo "`basename ${stage_file}` downloaded to ${TARBALL_FOLDER}"
}

function doHelp() {
	case "${parameters[1]}" in
		list)
			helpList
			;;
		use)
			helpUse
			;;
		convert)
			helpConvert
			;;
		export)
			helpExport
			;;
		delete)
			helpDelete
			;;
		rename)
			helpRename
			;;
		rebase)
			helpRebase
			;;
		download)
			helpDownload
			;;
		compression)
			helpCompression
			;;
		notes)
			helpNotes
			;;
		*)
			usage
			;;
	esac
}

function doNotes() {
	setAndCheckFile
	case "${parameters[2]}" in
		delete)
			handleCommand "rm -f '${tarball_filename_fullpath}.notes'" "Deleting notes for ${tarball}"
			;;
		edit)
			echo "Editing notes for `basename ${tarball_filename_fullpath}`"
			if [ "${DETACH_NOTE_EDITOR}" = "YES" ]; then
				"${TARBALL_NOTE_EDITOR}" "${tarball_filename_fullpath}.notes" > /dev/null 2>&1 &
			else
				"${TARBALL_NOTE_EDITOR}" "${tarball_filename_fullpath}.notes"
			fi
			
			;;
		*)
			echo "Unrecognized notes subcommand"
			helpNotes
	esac
}
	

function doInit() {
	header
	checkVars
	setOutputFolder

	case $command in
		list)
			doList
			;;
		use)
			doUse
			;;
		convert)
			doConvert
			;;
		export)
			doExport
			;;
		delete)
			doDelete
			;;
		rename)
			doRename
			;;
		rebase)
			doRebase
			;;
		download)
			doDownload
			;;
		help)
			doHelp
			;;
		notes)
			doNotes
			;;
		*)
			usage
			exit 1
	esac
	exit 0
}

doInit

